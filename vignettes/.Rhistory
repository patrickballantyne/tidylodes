long = unlist(map(test_sf$W_geometry,2)))
View(test)
test <- de_od_sub_sp %>%
mutate(W_lat = unlist(map(de_od_sub_sp$W_geometry,1)),
W_long = unlist(map(de_od_sub_sp$W_geometry,2)),
R_lat =  unlist(map(de_od_sub_sp$R_geometry,1)),
R_lon = unlist(map(de_od_sub_sp$R_geometry,2)))
View(test)
test2 <- dplyr::mutate(de_od_sub_sp, W_lat = unlist(map(de_od_sub_sp$W_geometry,1)),
W_long = unlist(map(de_od_sub_sp$W_geometry,2)), R_lat =  unlist(map(de_od_sub_sp$R_geometry,1)),
R_lon = unlist(map(de_od_sub_sp$R_geometry,2))))
test2 <- dplyr::mutate(de_od_sub_sp, W_lat = unlist(map(de_od_sub_sp$W_geometry,1)),
W_long = unlist(map(de_od_sub_sp$W_geometry,2)), R_lat =  unlist(map(de_od_sub_sp$R_geometry,1)),
R_lon = unlist(map(de_od_sub_sp$R_geometry,2)))
View(test2)
get_od_spatial <- function(df) {
## Stage One - Extracting and formatting the Census Blocks for the state of interest
options(tigris_class = "sf")
state_of_interest <- unique(df$W_StateAbb)
state_of_interest <- stringr::str_to_upper(state_of_interest)
blocks <- tigris::blocks(state = state_of_interest)
blocks <- blocks[, c("GEOID10","STATEFP10", "COUNTYFP10", "TRACTCE10", "BLOCKCE10")]
colnames(blocks) <- c("Census_Block_Code","StateID", "CountyID", "TractID", "BlockID", "geometry")
blocks <- transform(blocks, BlockGroupID = substr(BlockID, 1, 1), CensusBlockID = substr(BlockID, 2, 4))
blocks <- blocks[, c(1:5, 7:8, 6)]
## Stage Two - Convert the census blocks to centroids
blocks_sf <- sf::st_as_sf(blocks)
block_centroids <- sf::st_centroid(blocks_sf)
## Stage Three - Joining centroids coordinates onto the OD data
df_merge <- merge(df, block_centroids, by.x = c("Workplace_Census_Block_Code", "W_StateID", "W_CountyID", "W_TractID", "W_BlockGroupID", "W_CensusBlockID"),
by.y = c("Census_Block_Code", "StateID", "CountyID", "TractID", "BlockGroupID", "CensusBlockID"), all.x = TRUE)
colnames(df_merge)[24] <- c("W_geometry")
df_merge_2 <- merge(df_merge, block_centroids, by.x = c("Residence_Census_Block_Code", "R_StateID", "R_CountyID", "R_TractID", "R_BlockGroupID", "R_CensusBlockID"),
by.y = c("Census_Block_Code", "StateID", "CountyID", "TractID", "BlockGroupID", "CensusBlockID"), all.x = TRUE)
colnames(df_merge_2)[26] <- c("R_geometry")
df_merge_2 <- subset(df_merge_2, select=-c(BlockID.x, BlockID.y))
## Stage Four - Formatting geometries
df <- dplyr::mutate(df_merge_2, W_lat = unlist(map(df_merge_2$W_geometry,1)),
W_long = unlist(map(df_merge_2$W_geometry,2)), R_lat =  unlist(map(df_merge_2$R_geometry,1)),
R_lon = unlist(map(df_merge_2$R_geometry,2)))
return(df)
}
## Convert to spatial format
de_od_sub_sp <- get_od_spatial(de_od_sub)
View(de_od_sub_sp)
## Plot
ggplot(de_od_sub_sp, aes(W_lon, R_lon)) +
geom_segment(aes(x = R_lat, y = R_lon, xend = W_lat, yend = W_lon), col = 'white') +
scale_alpha_continuous() +
theme(panel.background = element_rect(fill='black', colour = 'black'))
## Convert to spatial format
de_od_sub_sp <- get_od_spatial(de_od_sub)
get_od_spatial <- function(df) {
## Stage One - Extracting and formatting the Census Blocks for the state of interest
options(tigris_class = "sf")
state_of_interest <- unique(df$W_StateAbb)
state_of_interest <- stringr::str_to_upper(state_of_interest)
blocks <- tigris::blocks(state = state_of_interest)
blocks <- blocks[, c("GEOID10","STATEFP10", "COUNTYFP10", "TRACTCE10", "BLOCKCE10")]
colnames(blocks) <- c("Census_Block_Code","StateID", "CountyID", "TractID", "BlockID", "geometry")
blocks <- transform(blocks, BlockGroupID = substr(BlockID, 1, 1), CensusBlockID = substr(BlockID, 2, 4))
blocks <- blocks[, c(1:5, 7:8, 6)]
## Stage Two - Convert the census blocks to centroids
blocks_sf <- sf::st_as_sf(blocks)
block_centroids <- sf::st_centroid(blocks_sf)
## Stage Three - Joining centroids coordinates onto the OD data
df_merge <- merge(df, block_centroids, by.x = c("Workplace_Census_Block_Code", "W_StateID", "W_CountyID", "W_TractID", "W_BlockGroupID", "W_CensusBlockID"),
by.y = c("Census_Block_Code", "StateID", "CountyID", "TractID", "BlockGroupID", "CensusBlockID"), all.x = TRUE)
colnames(df_merge)[24] <- c("W_geometry")
df_merge_2 <- merge(df_merge, block_centroids, by.x = c("Residence_Census_Block_Code", "R_StateID", "R_CountyID", "R_TractID", "R_BlockGroupID", "R_CensusBlockID"),
by.y = c("Census_Block_Code", "StateID", "CountyID", "TractID", "BlockGroupID", "CensusBlockID"), all.x = TRUE)
colnames(df_merge_2)[26] <- c("R_geometry")
df_merge_2 <- subset(df_merge_2, select=-c(BlockID.x, BlockID.y))
## Stage Four - Formatting geometries
df <- dplyr::mutate(df_merge_2, W_lat = unlist(map(df_merge_2$W_geometry,1)),
W_lon = unlist(map(df_merge_2$W_geometry,2)), R_lat =  unlist(map(df_merge_2$R_geometry,1)),
R_lon = unlist(map(df_merge_2$R_geometry,2)))
return(df)
}
## Plot
ggplot(de_od_sub_sp, aes(W_lon, R_lon)) +
geom_segment(aes(x = R_lat, y = R_lon, xend = W_lat, yend = W_lon), col = 'white') +
scale_alpha_continuous() +
theme(panel.background = element_rect(fill='black', colour = 'black'))
## Convert to spatial format
de_od_sub_sp <- get_od_spatial(de_od_sub)
## Plot
ggplot(de_od_sub_sp, aes(W_lon, R_lon)) +
geom_segment(aes(x = R_lat, y = R_lon, xend = W_lat, yend = W_lon), col = 'white') +
scale_alpha_continuous() +
theme(panel.background = element_rect(fill='black', colour = 'black'))
## Subset to flows over 50
de_od_sub <- get_od_subset(de_od, flow_threshold = 15)
## Subset to flows over 50
de_od_sub <- get_od_subset(de_od, flow_threshold = 10)
## Convert to spatial format
de_od_sub_sp <- get_od_spatial(de_od_sub)
## Plot
ggplot(de_od_sub_sp, aes(W_lon, R_lon)) +
geom_segment(aes(x = R_lat, y = R_lon, xend = W_lat, yend = W_lon), col = 'white') +
scale_alpha_continuous() +
theme(panel.background = element_rect(fill='black', colour = 'black'))
## Plot
ggplot(de_od_sub_sp, aes(W_lon, R_lon)) +
geom_segment(aes(x = R_lat, y = R_lon, xend = W_lat, yend = W_lon), col = 'white') +
scale_alpha_continuous()
## Plot
ggplot(de_od_sub_sp, aes(W_lon, R_lon)) +
geom_segment(aes(x = R_lat, y = R_lon, xend = W_lat, yend = W_lon), col = 'white') +
scale_alpha_continuous() +
theme(panel.background = element_rect(fill='black', colour = 'black'))
## Plot
ggplot(de_od_sub_sp, aes(W_lon, R_lon)) +
geom_segment(aes(x = R_lat, y = R_lon, xend = W_lat, yend = W_lon), col = 'white') +
scale_alpha_continuous() +
theme(panel.background = element_rect(fill='black', colour = 'black'), panel.grid.major = element_blank())
## Plot
ggplot(de_od_sub_sp, aes(W_lon, R_lon)) +
geom_segment(aes(x = R_lat, y = R_lon, xend = W_lat, yend = W_lon), col = 'white') +
scale_alpha_continuous() +
theme(panel.background = element_rect(fill='black', colour = 'black'), panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
de_outline <- tigris::states("DE")
de_outline <- tigris::states("DE", 2000)
de_outline <- tigris::states()?tigris::states
?tigris::states()
de_outline <- tigris::states()
de_outline <-
head(de_outline)
de_outline <- tigris::states()tigris::counties(state = "DE")
de_outline <- tigris::counties(state = "DE")
tm_shape(de_outline) +
tm_polygons()
tmap::tm_shape(de_outline) +
tm_polygons()
tmap::tm_shape(de_outline) +
tmap::tm_polygons()
ggplot(de_outline) +
geom_polygon()
head(de_outline)
ggplot(de_outline, aes(x = x, y = y)) +
geom_polygon()
ggplot(de_outline) +
aes(long, lat) +
geom_polygon()+
geom_path(color = "NA", linemitre = 2) +
geom_segment(data = de_od_sub_sp, aes(x = R_lat, y = R_lon, xend = W_lat, yend = W_lon), col="white")+
scale_alpha_continuous(range = c(0.005, 0.9))+
#Set black background, ditch axes and fix aspect ratio
theme(panel.background = element_rect(fill='black',colour='black'), panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
#quiet +
coord_equal()
ggplot(de_outline) +
aes(lon, lat) +
geom_polygon()+
geom_path(color = "NA", linemitre = 2) +
geom_segment(data = de_od_sub_sp, aes(x = R_lat, y = R_lon, xend = W_lat, yend = W_lon), col="white")+
scale_alpha_continuous(range = c(0.005, 0.9))+
#Set black background, ditch axes and fix aspect ratio
theme(panel.background = element_rect(fill='black',colour='black'), panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
#quiet +
coord_equal()
ggplot(de_outline) +
aes(geometry) +
geom_polygon()+
geom_path(color = "NA", linemitre = 2) +
geom_segment(data = de_od_sub_sp, aes(x = R_lat, y = R_lon, xend = W_lat, yend = W_lon), col="white")+
scale_alpha_continuous(range = c(0.005, 0.9))+
#Set black background, ditch axes and fix aspect ratio
theme(panel.background = element_rect(fill='black',colour='black'), panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
#quiet +
coord_equal()
head(de_outline)
ggplot(de_outline) +
aes() +
geom_polygon()+
geom_path(color = "NA", linemitre = 2) +
geom_segment(data = de_od_sub_sp, aes(x = R_lat, y = R_lon, xend = W_lat, yend = W_lon), col="white")+
scale_alpha_continuous(range = c(0.005, 0.9))+
#Set black background, ditch axes and fix aspect ratio
theme(panel.background = element_rect(fill='black',colour='black'), panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
#quiet +
coord_equal()
ggplot(de_outline) +
aes(fill = geometry) +
geom_polygon()+
geom_path(color = "NA", linemitre = 2) +
geom_segment(data = de_od_sub_sp, aes(x = R_lat, y = R_lon, xend = W_lat, yend = W_lon), col="white")+
scale_alpha_continuous(range = c(0.005, 0.9))+
#Set black background, ditch axes and fix aspect ratio
theme(panel.background = element_rect(fill='black',colour='black'), panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
#quiet +
coord_equal()
View(de_outline)
## Convert to spatial format
de_od_sub_sp <- get_od_spatial(de_od_sub)
## Download a base shapefile from Tigris - in this case Delaware Counties
## Plot
ggplot(de_od_sub_sp, aes(W_lon, R_lon)) +
geom_segment(aes(x = R_lat, y = R_lon, xend = W_lat, yend = W_lon), col = 'white') +
scale_alpha_continuous() +
theme(panel.background = element_rect(fill='black', colour = 'black'), panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
## Get RAC data for Vermont, from 2017
vt_rac <- get_rac_data("vt", "2017")
## Convert to simple feature
vt_rac_sf <- get_rac_spatial(vt_rac)
#install.packages("tidyverse")
library(tidyverse)
#install.packages("tmap")
library(tmap)
## Subset dataset to specific County & Tract
area_of_interest <- vt_rac_sf %>%
filter(CountyID == "007", TractID == "000200")
## Map
tm_shape(area_of_interest) +
tm_fill(col = "Retail_Trade", style = "jenks",
title = "Retail Trade Jobs", palette = "YlOrRd", n = 5) +
tm_layout(legend.outside = T, frame = FALSE)
## Plot
ggplot(de_od_sub_sp, aes(W_lon, R_lon)) +
geom_segment(aes(x = R_lat, y = R_lon, xend = W_lat, yend = W_lon), col = 'white') +
scale_alpha_continuous() +
theme(panel.background = element_rect(fill='black', colour = 'black'), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_blank())
## Plot
ggplot(de_od_sub_sp, aes(W_lon, R_lon)) +
geom_segment(aes(x = R_lat, y = R_lon, xend = W_lat, yend = W_lon), col = 'white') +
scale_alpha_continuous() +
theme(panel.background = element_rect(fill='black', colour = 'black'), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_blank, axis.text = element_blank())
ggplot(de_od_sub_sp, aes(W_lon, R_lon)) +
geom_segment(aes(x = R_lat, y = R_lon, xend = W_lat, yend = W_lon), col = 'white') +
scale_alpha_continuous() +
theme(panel.background = element_rect(fill='black', colour = 'black'), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_blank, axis.text = element_blank())
## Plot
ggplot(de_od_sub_sp, aes(W_lon, R_lon)) +
geom_segment(aes(x = R_lat, y = R_lon, xend = W_lat, yend = W_lon), col = 'white') +
scale_alpha_continuous() +
theme(panel.background = element_rect(fill='black', colour = 'black'), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_blank(), axis.text = element_blank())
## Plot
ggplot(de_od_sub_sp, aes(W_lon, R_lon)) +
geom_segment(aes(x = R_lat, y = R_lon, xend = W_lat, yend = W_lon), col = 'white') +
scale_alpha_continuous() +
theme(panel.background = element_rect(fill='black', colour = 'black'), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_blank(), axis.text = element_blank(),
axis.title = element_blank)
## Plot
ggplot(de_od_sub_sp, aes(W_lon, R_lon)) +
geom_segment(aes(x = R_lat, y = R_lon, xend = W_lat, yend = W_lon), col = 'white') +
scale_alpha_continuous() +
theme(panel.background = element_rect(fill='black', colour = 'black'), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_blank(), axis.text = element_blank(),
axis.title = element_blank())
## Plot all flows for Delaware State over 10
ggplot(de_od_sub_sp, aes(W_lon, R_lon)) +
geom_segment(aes(x = R_lat, y = R_lon, xend = W_lat, yend = W_lon), col = 'gray') +
scale_alpha_continuous() +
theme(panel.background = element_rect(fill='white', colour = 'white'), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_blank(), axis.text = element_blank(),
axis.title = element_blank())
## Plot all flows for Delaware State over 10
ggplot(de_od_sub_sp, aes(W_lon, R_lon)) +
geom_segment(aes(x = R_lat, y = R_lon, xend = W_lat, yend = W_lon), col = 'black') +
scale_alpha_continuous() +
theme(panel.background = element_rect(fill='white', colour = 'white'), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_blank(), axis.text = element_blank(),
axis.title = element_blank())
## Plot all flows for Delaware State over 10
ggplot(de_od_sub_sp, aes(W_lon, R_lon)) +
geom_segment(aes(x = R_lat, y = R_lon, xend = W_lat, yend = W_lon), col = 'black') +
scale_alpha_continuous() +
theme(panel.background = element_rect(fill='white', colour = 'white'), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_blank(), axis.text = element_blank(),
axis.title = element_blank(), axis.ticks = element_blank())
## Plot all flows for Delaware State over 10
ggplot(de_od_sub_sp, aes(W_lon, R_lon)) +
geom_segment(aes(x = R_lat, y = R_lon, xend = W_lat, yend = W_lon), col = 'red') +
scale_alpha_continuous() +
theme(panel.background = element_rect(fill='white', colour = 'white'), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_blank(), axis.text = element_blank(),
axis.title = element_blank(), axis.ticks = element_blank())
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
## Install package directly from GitHub
#devtools::install_github("patrickballantyne/tidylodes")
## Setup
library(tidylodes)
## List all available functions
ls("package:tidylodes")
# Get function help
?get_wac_data
## Extract WAC data for Delaware, from 2013
de_wac <- get_wac_data("de", "2013")
de_wac[1:2, ]
## Reduce the dimensionality of de_wac to focus on one job sector - e.g. Retail Trade
de_wac_rt <- get_jobsector_wac(de_wac, job_code = "Retail_Trade",
job_proportion = T)
de_wac_rt[1:2, ]
## Convert the simple features
de_wac_rt_sf <- get_wac_spatial(de_wac_rt)
de_wac_rt_sf[1:2, ]
## Download OD data for Delaware, from 2013
de_od <- get_od_data("de", "2013", main = T)
de_od[1:2, ]
## Subset data to include only those rows of data where flows exceed a certain threshold
de_od_sub <- get_od_subset(de_od, flow_threshold = 30)
de_od_sub[1:2, ]
## Convert to a format that enables plotting of flow lines between census block centroids
de_od_sub_sp <- get_od_spatial(de_od_sub)
de_od_sub_sp[1:2, ]
## Get RAC data for Vermont, from 2017
vt_rac <- get_rac_data("vt", "2017")
## Convert to simple feature
vt_rac_sf <- get_rac_spatial(vt_rac)
#install.packages("tidyverse")
library(tidyverse)
#install.packages("tmap")
library(tmap)
## Subset dataset to specific County & Tract
area_of_interest <- vt_rac_sf %>%
filter(CountyID == "007", TractID == "000200")
## Map
tm_shape(area_of_interest) +
tm_fill(col = "Retail_Trade", style = "jenks",
title = "Retail Trade Jobs", palette = "YlOrRd", n = 5) +
tm_layout(legend.outside = T, frame = FALSE)
## Get OD data for Delaware State
de_od <- get_od_data("de", "2014", T)
## Subset to flows over 50
de_od_sub <- get_od_subset(de_od, flow_threshold = 10)
## Convert to spatial format
de_od_sub_sp <- get_od_spatial(de_od_sub)
## Plot all flows for Delaware State over 10
ggplot(de_od_sub_sp, aes(W_lon, R_lon)) +
geom_segment(aes(x = R_lat, y = R_lon, xend = W_lat, yend = W_lon), col = 'red') +
scale_alpha_continuous() +
theme(panel.background = element_rect(fill='white', colour = 'white'), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_blank(), axis.text = element_blank(),
axis.title = element_blank(), axis.ticks = element_blank())
head(de_od_sub_sp)
ggplot(de_od_sub_sp, aes(W_lon, R_lon)) +
geom_segment(aes(x = R_lat, y = R_lon, xend = W_lat, yend = W_lon), col = 'red') +
scale_alpha_continuous() +
theme(panel.background = element_rect(fill='white', colour = 'white'), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_blank(), axis.text = element_blank(),
axis.title = element_blank(), axis.ticks = element_blank())
## Plot all flows for Delaware State over 10
ggplot(de_od_sub_sp, aes(W_lat, R_lat)) +
geom_segment(aes(x = R_lat, y = R_lon, xend = W_lat, yend = W_lon), col = 'red') +
scale_alpha_continuous() +
theme(panel.background = element_rect(fill='white', colour = 'white'), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_blank(), axis.text = element_blank(),
axis.title = element_blank(), axis.ticks = element_blank())
knit_with_parameters('C:/Users/sgpballa/Google Drive/Patrick Academic/POSTGRAD/MSc/ENVS613 - Dissertation/Analysis/LODES R Package/tidylodes/vignettes/tidylodes.Rmd')
## Plot all flows for Delaware State over 10
ggplot(de_od_sub_sp, aes()) +
geom_segment(aes(x = R_lat, y = R_lon, xend = W_lat, yend = W_lon), col = 'red') +
scale_alpha_continuous() +
theme(panel.background = element_rect(fill='white', colour = 'white'), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_blank(), axis.text = element_blank(),
axis.title = element_blank(), axis.ticks = element_blank())
## Convert to spatial format
de_od_sub_sp <- get_od_spatial(de_od_sub)
head(de_od_sub_sp)
## Plot all flows for Delaware State over 10
ggplot(de_od_sub_sp, aes()) +
geom_segment(aes(x = R_lat, y = R_lon, xend = W_lat, yend = W_lon), col = 'red') +
scale_alpha_continuous() +
theme(panel.background = element_rect(fill='white', colour = 'white'), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_blank(), axis.text = element_blank(),
axis.title = element_blank(), axis.ticks = element_blank())
## Plot all flows for Delaware State over 10
ggplot(de_od_sub_sp) +
geom_segment(aes(x = R_lat, y = R_lon, xend = W_lat, yend = W_lon), col = 'red') +
scale_alpha_continuous() +
theme(panel.background = element_rect(fill='white', colour = 'white'), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_blank(), axis.text = element_blank(),
axis.title = element_blank(), axis.ticks = element_blank())
## Plot all flows for Delaware State over 10
library(ggplot2)
ggplot(de_od_sub_sp) +
geom_segment(aes(x = R_lat, y = R_lon, xend = W_lat, yend = W_lon), col = 'red') +
scale_alpha_continuous() +
theme(panel.background = element_rect(fill='white', colour = 'white'), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_blank(), axis.text = element_blank(),
axis.title = element_blank(), axis.ticks = element_blank())
library(knitr)
ggplot(de_od_sub_sp) +
geom_segment(aes(x = R_lat, y = R_lon, xend = W_lat, yend = W_lon), col = 'red') +
scale_alpha_continuous() +
theme(panel.background = element_rect(fill='white', colour = 'white'), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_blank(), axis.text = element_blank(),
axis.title = element_blank(), axis.ticks = element_blank())
library(reshape2)
ggplot(de_od_sub_sp) +
geom_segment(aes(x = R_lat, y = R_lon, xend = W_lat, yend = W_lon), col = 'red') +
scale_alpha_continuous() +
theme(panel.background = element_rect(fill='white', colour = 'white'), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_blank(), axis.text = element_blank(),
axis.title = element_blank(), axis.ticks = element_blank())
plot(de_od_sub_sp)
plot(de_od_sub_sp$)
plot(de_od_sub_sp$W_geometry)
head(de_od_sub_sp)
ggplot(de_od_sub_sp) +
geom_segment(aes(x = R_lat, y = R_lon, xend = W_lat, yend = W_lon), col = 'red') +
scale_alpha_continuous() +
theme(panel.background = element_rect(fill='white', colour = 'white'), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_blank(), axis.text = element_blank(),
axis.title = element_blank(), axis.ticks = element_blank())
## Convert to spatial format
de_od_sub_sp <- get_od_spatial(de_od_sub)
head(de_od_sub_sp)
## Plot all flows for Delaware State over 10
library(ggplot2)
library(knitr)
library(reshape2)
ggplot(de_od_sub_sp) +
geom_segment(aes(x = R_lat, y = R_lon, xend = W_lat, yend = W_lon), col = 'red') +
scale_alpha_continuous() +
theme(panel.background = element_rect(fill='white', colour = 'white'), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_blank(), axis.text = element_blank(),
axis.title = element_blank(), axis.ticks = element_blank())
ggplot(de_od_sub_sp) +
geom_segment(aes(x = R_lat, y = R_lon, xend = W_lat, yend = W_lon), col = 'red') +
scale_alpha_continuous() +
theme(panel.background = element_rect(fill='white', colour = 'white'), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_blank(), axis.text = element_blank(),
axis.title = element_blank(), axis.ticks = element_blank())
ggplot(de_od_sub_sp) +
geom_segment(aes(x = R_lat, y = R_lon, xend = W_lat, yend = W_lon), col = 'red') +
scale_alpha_continuous() +
theme(panel.background = element_rect(fill='gray', colour = 'gray'), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_blank(), axis.text = element_blank(),
axis.title = element_blank(), axis.ticks = element_blank())
ggplot(de_od_sub_sp) +
geom_segment(aes(x = R_lat, y = R_lon, xend = W_lat, yend = W_lon), col = 'white') +
scale_alpha_continuous() +
theme(panel.background = element_rect(fill='gray', colour = 'gray'), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_blank(), axis.text = element_blank(),
axis.title = element_blank(), axis.ticks = element_blank())
ggplot(de_od_sub_sp) +
geom_segment(aes(x = R_lat, y = R_lon, xend = W_lat, yend = W_lon), col = 'black') +
scale_alpha_continuous() +
theme(panel.background = element_rect(fill='gray', colour = 'gray'), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_blank(), axis.text = element_blank(),
axis.title = element_blank(), axis.ticks = element_blank())
ggplot(de_od_sub_sp) +
geom_segment(aes(), col = 'black') +
scale_alpha_continuous() +
theme(panel.background = element_rect(fill='gray', colour = 'gray'), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_blank(), axis.text = element_blank(),
axis.title = element_blank(), axis.ticks = element_blank())
ggplot(de_od_sub_sp) +
geom_segment(aes(x = W_lat, y = R_lat, xend = W_lon, yend = R_lon), col = 'black') +
scale_alpha_continuous() +
theme(panel.background = element_rect(fill='gray', colour = 'gray'), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_blank(), axis.text = element_blank(),
axis.title = element_blank(), axis.ticks = element_blank())
ggplot(de_od_sub_sp) +
geom_segment(aes(x = W_lat, y = W_lon, xend = R_lat, yend = R_lon), col = 'black') +
scale_alpha_continuous() +
theme(panel.background = element_rect(fill='gray', colour = 'gray'), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_blank(), axis.text = element_blank(),
axis.title = element_blank(), axis.ticks = element_blank())
version
version(tidyverse)
package_version(tidyverse)
package_version("tidyverse")
package_version("tmap")
packageVersion("tidyverse")
packageVersion("tmap")
## Setup
library(tidylodes)
## Map
tm_shape(area_of_interest) +
tm_fill(col = "Retail_Trade", style = "jenks",
title = "Retail Trade Jobs", palette = "Greys", n = 5) +
tm_layout(legend.outside = T, frame = FALSE)
#install.packages("tidyverse")
library(tidyverse)
#install.packages("tmap")
library(tmap)
## Subset dataset to specific County & Tract
area_of_interest <- vt_rac_sf %>%
filter(CountyID == "007", TractID == "000200")
## Get RAC data for Vermont, from 2017
vt_rac <- get_rac_data("vt", "2017")
## Convert to simple feature
vt_rac_sf <- get_rac_spatial(vt_rac)
#install.packages("tidyverse")
library(tidyverse)
#install.packages("tmap")
library(tmap)
## Subset dataset to specific County & Tract
area_of_interest <- vt_rac_sf %>%
filter(CountyID == "007", TractID == "000200")
## Map
tm_shape(area_of_interest) +
tm_fill(col = "Retail_Trade", style = "jenks",
title = "Retail Trade Jobs", palette = "Greys", n = 5) +
tm_layout(legend.outside = T, frame = FALSE)
