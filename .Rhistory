## Convert the simple features
de_wac_rt_sf <- get_wac_spatial(de_wac_rt)
de_wac_rt_sf[1:2, ]
## Convert the simple features
de_wac_rt_sf <- get_wac_spatial(de_wac_rt)
de_wac_rt_sf[1:2, ]
## Convert the simple features
de_wac_rt_sf <- get_wac_spatial(de_wac_rt)
de_wac_rt_sf[1:2, ]
de_wac_rt_sf[1:2, ]
## Map
tm_shape(vt_rac_sf) +
tm_fill(col = "Retail_Trade", style = "pretty",
title = "Retail Trade Jobs", palette = "YlOrRd", n = 5) +
tm_layout(legend.outside = T, frame = FALSE)
#install.packages("tidyverse")
library(tidyverse)
#install.packages("tmap")
library(tmap)
vt_rac_sf <- sf::st_as_sf(vt_rac_sf)
## Get RAC data for Vermont, from 2017
vt_rac <- get_rac_data("vt", "2017")
## Convert to simple feature
vt_rac_sf <- get_rac_spatial(vt_rac)
vt_rac_sf[1:2, ]
## Get RAC data for Vermont, from 2017
vt_rac <- get_rac_data("vt", "2017")
## Convert to simple feature
vt_rac_sf <- get_rac_spatial(vt_rac)
#install.packages("tidyverse")
library(tidyverse)
#install.packages("tmap")
library(tmap)
## Subset dataset to specific County & Tract
vt_rac_sf <- vt_rac_sf %>%
filter(CountyID == "001", TractID == "960100")
## Map
tm_shape(vt_rac_sf) +
tm_fill(col = "Retail_Trade", style = "pretty",
title = "Retail Trade Jobs", palette = "YlOrRd", n = 5) +
tm_layout(legend.outside = T, frame = FALSE)
## Map
tm_shape(vt_rac_sf) +
tm_fill(col = "Retail_Trade", style = "pretty",
title = "Retail Trade Jobs", palette = "YlOrRd", n = 3) +
tm_layout(legend.outside = T, frame = FALSE)
## Map
tm_shape(vt_rac_sf) +
tm_fill(col = "Retail_Trade", style = "pretty",
title = "Retail Trade Jobs", palette = "YlOrRd", n = 4) +
tm_layout(legend.outside = T, frame = FALSE)
## Map
tm_shape(vt_rac_sf) +
tm_fill(col = "Retail_Trade", style = "pretty",
title = "Retail Trade Jobs", palette = "YlOrRd", n = 3) +
tm_layout(legend.outside = T, frame = FALSE)
#install.packages("tidyverse")
library(tidyverse)
#install.packages("tmap")
library(tmap)
## Subset dataset to specific County & Tract
vt_rac_sf <- dplyr::filter(CountyID == "001", TractID == "960100")
#install.packages("tidyverse")
library(tidyverse)
#install.packages("tmap")
library(tmap)
## Subset dataset to specific County & Tract
area_of_interest <- vt_rac_sf %>%
filter(CountyID == "001", TractID == "960100")
## Map
tm_shape(area_of_interest) +
tm_fill(col = "Retail_Trade", style = "pretty",
title = "Retail Trade Jobs", palette = "YlOrRd", n = 3) +
tm_layout(legend.outside = T, frame = FALSE)
View(vt_rac_sf)
## Get RAC data for Vermont, from 2017
vt_rac <- get_rac_data("vt", "2017")
## Convert to simple feature
vt_rac_sf <- get_rac_spatial(vt_rac)
View(vt_rac_sf)
#install.packages("tidyverse")
library(tidyverse)
#install.packages("tmap")
library(tmap)
## Subset dataset to specific County & Tract
area_of_interest <- vt_rac_sf %>%
filter(CountyID == "007", TractID == "000200")
## Map
tm_shape(area_of_interest) +
tm_fill(col = "Retail_Trade", style = "pretty",
title = "Retail Trade Jobs", palette = "YlOrRd", n = 3) +
tm_layout(legend.outside = T, frame = FALSE)
## Map
tm_shape(area_of_interest) +
tm_fill(col = "Retail_Trade", style = "pretty",
title = "Retail Trade Jobs", palette = "YlOrRd", n = 5) +
tm_layout(legend.outside = T, frame = FALSE)
## Map
tm_shape(area_of_interest) +
tm_fill(col = "Retail_Trade", style = "pretty",
title = "Retail Trade Jobs", palette = "YlOrRd", n = 8) +
tm_layout(legend.outside = T, frame = FALSE)
## Map
tm_shape(area_of_interest) +
tm_fill(col = "Retail_Trade", style = "pretty",
title = "Retail Trade Jobs", palette = "YlOrRd", n = 5) +
tm_layout(legend.outside = T, frame = FALSE)
## Map
tm_shape(area_of_interest) +
tm_fill(col = "Retail_Trade", style = "quantile",
title = "Retail Trade Jobs", palette = "YlOrRd", n = 5) +
tm_layout(legend.outside = T, frame = FALSE)
## Map
tm_shape(area_of_interest) +
tm_fill(col = "Retail_Trade", style = "jenks",
title = "Retail Trade Jobs", palette = "YlOrRd", n = 5) +
tm_layout(legend.outside = T, frame = FALSE)
## Map
tmap_mode('leaflet)
## Map
tmap_mode('leaflet')
## Map
tmap_mode('leaflet')
## Map
tmap_mode('view')
tm_shape(area_of_interest) +
tm_fill(col = "Retail_Trade", style = "jenks",
title = "Retail Trade Jobs", palette = "YlOrRd", n = 5) +
tm_layout(legend.outside = T, frame = FALSE)
## Map
tmap_mode('plot')
tm_shape(area_of_interest) +
tm_fill(col = "Retail_Trade", style = "jenks",
title = "Retail Trade Jobs", palette = "YlOrRd", n = 5) +
tm_layout(legend.outside = T, frame = FALSE)
get_jobsector_wac <- function(df, job_code, job_proportion = T) {
### Stage One - Subsetting to include only job sector of interest
df_sub <- df[, c("Census_Block_Code", "StateID", "StateName", "StateAbb", "CountyID", "CountyName","TractID", "TractName", "BlockGroupID",
"BlockGroupName", "CensusBlockID","Total_Jobs")]
df_col <- dplyr::select(df, job_code)
df_full <- cbind(df_sub, df_col)
df_full[, 12] <- sapply(df_full[, 12], as.numeric)
### Stage Two - Calculating job sector proportion
if(job_proportion == T) {
colnames(df_full)[13] <- "Col_of_Interest"
df_full[, 13] <- sapply(df_full[, 13], as.numeric)
df_full$Job_Code_Proportion <- (df_full$Col_of_Interest/df_full$Total_Jobs)*100
colnames(df_full)[13] <- paste0(Job_Code)
colnames(df_full)[14] <- paste0(Job_Code, "_Proportion")}
else {
df_full <- df_full
}
return(df_full)
}
devtools::build()
devtools::install()
devtools::build()
## Setup
library(tidylodes)
## Reduce the dimensionality of de_wac to focus on one job sector - e.g. Retail Trade
de_wac_rt <- get_jobsector_wac(de_wac, job_code = "Retail_Trade",
job_proportion = T)
## Extract WAC data for Delaware, from 2013
de_wac <- get_wac_data("de", "2013")
de_wac[1:2, ]
## Reduce the dimensionality of de_wac to focus on one job sector - e.g. Retail Trade
de_wac_rt <- get_jobsector_wac(de_wac, job_code = "Retail_Trade",
job_proportion = T)
build()
devtools::build()
devtools::install()
library(tidylodes)
?get_wac_data
file.exists("~/.ssh.id_rsa.pub")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
## Need to link to github here!
## Setup
library(tidylodes)
## List all available functions
ls("package:tidylodes")
## Extract WAC data for Delaware, from 2013
de_wac <- get_wac_data("de", "2013")
de_wac[1:2, ]
## Reduce the dimensionality of de_wac to focus on one job sector - e.g. Retail Trade
de_wac_rt <- get_jobsector_wac(de_wac, job_code = "Retail_Trade",
job_proportion = T)
de_wac_rt[1:2, ]
## Convert the simple features
de_wac_rt_sf <- get_wac_spatial(de_wac_rt)
de_wac_rt_sf[1:2, ]
## Download OD data for Delaware, from 2013
de_od <- get_od_data("de", "2013", main = T)
de_od[1:2, ]
## Subset data to include only those rows of data where flows exceed a certain threshold
de_od_sub <- get_od_subset(de_od, flow_threshold = 30)
de_od_sub[1:2, ]
## Convert to a format that enables plotting of flow lines between census block centroids
de_od_sub_sp <- get_od_spatial(de_od_sub)
de_od_sub_sp[1:2, ]
## Get RAC data for Vermont, from 2017
vt_rac <- get_rac_data("vt", "2017")
## Convert to simple feature
vt_rac_sf <- get_rac_spatial(vt_rac)
#install.packages("tidyverse")
library(tidyverse)
#install.packages("tmap")
library(tmap)
## Subset dataset to specific County & Tract
area_of_interest <- vt_rac_sf %>%
filter(CountyID == "007", TractID == "000200")
## Map
tm_shape(area_of_interest) +
tm_fill(col = "Retail_Trade", style = "jenks",
title = "Retail Trade Jobs", palette = "YlOrRd", n = 5) +
tm_layout(legend.outside = T, frame = FALSE)
## Get OD data for Illinois State
il_od <- get_od_data("il", "2014", T)
## Subset to flows over 50
il_od_sub <- get_od_subset(il_od, flow_threshold = 50)
head(il_od_sub)
## Convert to spatial format
il_od_sub_sp <- get_od_spatial(il_od_sub)
head(il_od_sub_sp)
ggplot(il_od_sub_sp, aes(W_geometry, R_geometry)) +
geom_segment(aes(x = W_geometry, y = R_geometry), col = 'white') +
scale_alpha_continuous() +
theme(panel.background = element_rect(fill='black', colour = 'black'))
ggplot(il_od_sub_sp, aes(W_geometry, R_geometry)) +
geom_segment(aes(x = W_geometry, y = R_geometry, xend = W_geometry, yend = R_geometry), col = 'white') +
scale_alpha_continuous() +
theme(panel.background = element_rect(fill='black', colour = 'black'))
plot(x = il_od_sub_sp$W_geometry, y = il_od_sub_sp$R_geometry)
plot(x = il_od_sub_sp$W_geometry)
nrow(il_od_sub_sp
nrow(il_od_sub_sp)
nrow(il_od_sub_sp)
plot(x = il_od_sub_sp)
# Get function help
?get_wac_data
## Get OD data for Delaware State
de_od <- get_od_data("da", "2014", T)
## Get OD data for Delaware State
de_od <- get_od_data("de", "2014", T)
## Subset to flows over 50
de_od_sub <- get_od_subset(de_od, flow_threshold = 50)
## Convert to spatial format
de_od_sub_sp <- get_od_spatial(de_od_sub)
## Plot
dplyr::glimpse(de_od_sub_sp)
## Get OD data for Delaware State
de_od <- get_od_data("de", "2014", T)
## Subset to flows over 50
de_od_sub <- get_od_subset(de_od, flow_threshold = 50)
## Install package directly from GitHub
devtools::install_github("patrickballantyne/tidylodes")
devtools::build()
devtools::install()
devtools::build()
## Stage Four - Formatting geometries
df <- dplyr::mutate(df_merge_2, W_lat = unlist(map(df_merge_2$W_geometry,1)),
W_lon = unlist(map(df_merge_2$W_geometry,2)), R_lat =  unlist(purrr::map(df_merge_2$R_geometry,1)),
R_lon = unlist(map(df_merge_2$R_geometry,2)))
devtools::build()
devtools::build()
devtools::build()
devtools::install()
devtools::install_github("patrickballantyne/tidylodes")
devtools::install_github("patrickballantyne/tidylodes")
devtools::install_github("patrickballantyne/tidylodes", subdir = "R")
install.packages("devtools")
library(devtools)
install_github("patrickballantyne/tidylodes")
devtools::build()
devtools::build()
devtools::build()
devtools::build()
devtools::build()
devtools::build()
devtools::build()
devtools::build()
devtools::build()
devtools::install()
## Setup
library(tidylodes)
#install.packages("tidyverse")
library(tidyverse)
#install.packages("tmap")
library(tmap)
## Subset dataset to specific County & Tract
area_of_interest <- vt_rac_sf %>%
filter(CountyID == "007", TractID == "000200")
## Get RAC data for Vermont, from 2017
vt_rac <- get_rac_data("vt", "2017")
## Convert to simple feature
vt_rac_sf <- get_rac_spatial(vt_rac)
#install.packages("tidyverse")
library(tidyverse)
#install.packages("tmap")
library(tmap)
## Subset dataset to specific County & Tract
area_of_interest <- vt_rac_sf %>%
filter(CountyID == "007", TractID == "000200")
## Map
tm_shape(area_of_interest) +
tm_fill(col = "Retail_Trade", style = "jenks",
title = "Retail Trade Jobs", palette = "Greys", n = 5) +
tm_layout(legend.outside = T, frame = FALSE)
#install.packages("tidyverse")
library(tidyverse)
#install.packages("tmap")
library(tmap)
## Subset dataset to specific County & Tract
area_of_interest <- vt_rac_sf %>%
filter(CountyID == "007", TractID == "000200")
## Map
tm_shape(area_of_interest) +
tm_fill(col = "Retail_Trade", style = "jenks",
title = "Retail Trade Jobs", palette = "Greys", n = 5) +
tm_layout(legend.outside = T, frame = FALSE)
## Get OD data for Delaware State
de_od <- get_od_data("de", "2014", T)
## Get subset (flows > 20)
de_od_sub <- get_od_subset(de_od, flow_threshold = 8)
## Convert to spatial, for mapping
de_od_sub_sp <- get_od_spatial(de_od_sub)
## Plot all flows for Delaware State over 10, using ggplot()
library(ggplot2)
ggplot(de_od_sub_sp) +
geom_segment(aes(x = W_lat, y = W_lon, xend = R_lat, yend = R_lon), col = "white") +
scale_alpha_continuous() +
theme(panel.background = element_rect(fill='black', colour = 'black'), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_blank(), axis.text = element_blank(),
axis.title = element_blank(), axis.ticks = element_blank())
## Convert the entire OD dataset to spatial format for Delaware
de_od_sp <- get_od_spatial(de_od)
## Extract flows for one workplace area - this could be substituted for one county, tract or blockgroup?
de_od_sp_aoi <- de_od_sp[de_od_sp$Workplace_Census_Block_Code == "100010405011044",]
## Plot all flows for Delaware State over 10
ggplot(de_od_sp_aoi) +
geom_segment(aes(x = W_lat, y = W_lon, xend = R_lat, yend = R_lon), col = "white") +
scale_alpha_continuous() +
theme(panel.background = element_rect(fill='black', colour = 'black'), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_blank(), axis.text = element_blank(),
axis.title = element_blank(), axis.ticks = element_blank())
# Reobtain Delaware OD data
de_od <- get_od_data("de", "2017")
# Again, only flows greater than 8
de_od_sub <- get_od_subset(de_od, flow_threshold = 8)
# Convert to spatial format, but set lines to T to get linestring object
de_lines <- get_od_spatial(de_od_sub, lines = T)
# Examine
de_lines
# Now plot the lines
tm_shape(de_lines) +
tm_lines()
tmap_mode('view)
tmap_mode('view')
tmap_mode('view')
# Now plot the lines
tm_shape(de_lines) +
tm_lines()
tmap_mode('plot')
# Now plot the lines
tm_shape(de_lines) +
tm_lines()
# Download a shapefile from Tigris
de_counties <- tigris::counties("de")
str(de_counties)
tm_shape(de_counties) +
tm_polygons()
# Download a shapefile of Delaware Counties from Tigris
de_tracts <- tigris::tracts("de")
tm_shape(de_counties) +
tm_polygons()
tm_shape(de_tracts) +
tm_polygons()
# Plot the Delaware tracts and OD data together
tm_shape(de_tracts) +
tm_polygons() +
tm_shape(de_lines) +
tm_lines()
# Plot the Delaware tracts and OD data together
tm_shape(de_tracts) +
tm_polygons(col = NA) +
tm_shape(de_lines) +
tm_lines()
# Plot the Delaware tracts and OD data together
tm_shape(de_tracts) +
tm_polygons(col = "white") +
tm_shape(de_lines) +
tm_lines()
# Plot the Delaware tracts and OD data together
tm_shape(de_tracts) +
tm_polygons(col = "white", border.col = "grey") +
tm_shape(de_lines) +
tm_lines()
# Plot the Delaware tracts and OD data together
tm_shape(de_tracts) +
tm_polygons(col = "white", border.col = "grey", border.alpha = 0.3) +
tm_shape(de_lines) +
tm_lines()
# Plot the Delaware tracts and OD data together
tm_shape(de_tracts) +
tm_polygons(col = "white", border.col = "grey", border.alpha = 0.5) +
tm_shape(de_lines) +
tm_lines()
# Plot the Delaware tracts and OD data together
tm_shape(de_tracts) +
tm_polygons(col = "white", border.col = "grey", border.alpha = 0.5) +
tm_shape(de_lines) +
tm_lines(alpha = 0.8)
# Plot the Delaware tracts and OD data together
tm_shape(de_tracts) +
tm_polygons(col = "white", border.col = "grey", border.alpha = 0.5) +
tm_shape(de_lines) +
tm_lines(alpha = 0.5)
# Plot the Delaware tracts and OD data together
tm_shape(de_tracts) +
tm_polygons(col = "white", border.col = "grey", border.alpha = 0.5) +
tm_shape(de_lines) +
tm_lines(col = "red", alpha = 0.5)
# Plot the Delaware tracts and OD data together
tm_shape(de_tracts) +
tm_polygons(col = "white", border.col = "grey", border.alpha = 0.5) +
tm_shape(de_lines) +
tm_lines(col = "grey", alpha = 0.5)
# Plot the Delaware tracts and OD data together
tm_shape(de_tracts) +
tm_polygons(col = "white", border.col = "grey", border.alpha = 0.5) +
tm_shape(de_lines) +
tm_lines(col = "blue", alpha = 0.5)
# Plot the Delaware tracts and OD data together
tm_shape(de_tracts) +
tm_polygons(col = "white", border.col = "grey", border.alpha = 0.5) +
tm_shape(de_lines) +
tm_lines(col = "black", alpha = 0.5)
# Plot the Delaware tracts and OD data together
tm_shape(de_tracts) +
tm_polygons(col = "white", border.col = "grey", border.alpha = 0.5) +
tm_shape(de_lines) +
tm_lines(col = "black", alpha = 0.6)
# Plot the Delaware tracts and OD data together
tm_shape(de_tracts) +
tm_polygons(col = "white", border.col = "grey", border.alpha = 0.5) +
tm_shape(de_lines) +
tm_lines(col = "black", alpha = 0.6) +
tm_layout(frame = F)
# Plot the Delaware tracts and OD data together
tm_shape(de_tracts) +
tm_polygons(col = "white", border.col = "grey", border.alpha = 0.5) +
tm_shape(de_lines) +
tm_lines(col = "black", alpha = 0.75) +
tm_layout(frame = F)
## Get RAC data for Vermont, from 2017
vt_rac <- get_rac_data("vt", "2017")
## Convert to simple feature
vt_rac_sf <- get_rac_spatial(vt_rac)
#install.packages("tidyverse")
library(tidyverse)
#install.packages("tmap")
library(tmap)
## Subset dataset to specific County & Tract
area_of_interest <- vt_rac_sf %>%
filter(CountyID == "007", TractID == "000200")
## Map
tm_shape(area_of_interest) +
tm_fill(col = "Retail_Trade", style = "jenks",
title = "Retail Trade Jobs", palette = "Greys", n = 5) +
tm_layout(legend.outside = T, frame = FALSE)
## Get OD data for Delaware State
de_od <- get_od_data("de", "2014", T)
## Get subset (flows > 8 )
de_od_sub <- get_od_subset(de_od, flow_threshold = 8)
## Convert to spatial, for mapping
de_od_sub_sp <- get_od_spatial(de_od_sub)
## Plot all flows for Delaware State over 10, using ggplot()
library(ggplot2)
ggplot(de_od_sub_sp) +
geom_segment(aes(x = W_lat, y = W_lon, xend = R_lat, yend = R_lon), col = "white") +
scale_alpha_continuous() +
theme(panel.background = element_rect(fill='black', colour = 'black'), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_blank(), axis.text = element_blank(),
axis.title = element_blank(), axis.ticks = element_blank())
## Convert the entire OD dataset to spatial format for Delaware
de_od_sp <- get_od_spatial(de_od)
## Extract flows for one workplace area - this could be substituted for one county, tract or blockgroup?
de_od_sp_aoi <- de_od_sp[de_od_sp$Workplace_Census_Block_Code == "100010405011044",]
## Plot all flows for Delaware State over 10
ggplot(de_od_sp_aoi) +
geom_segment(aes(x = W_lat, y = W_lon, xend = R_lat, yend = R_lon), col = "white") +
scale_alpha_continuous() +
theme(panel.background = element_rect(fill='black', colour = 'black'), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_blank(), axis.text = element_blank(),
axis.title = element_blank(), axis.ticks = element_blank())
# Again, only flows greater than 8
de_od_sub <- get_od_subset(de_od, flow_threshold = 8)
# Convert to spatial format, but set lines to T to get multilinestring object
de_lines <- get_od_spatial(de_od_sub, lines = T)
# Examine
de_lines
# Now plot the lines
tm_shape(de_lines) +
tm_lines()
# Plot the Delaware tracts and OD data together
tm_shape(de_tracts) +
tm_polygons(col = "white", border.col = "grey", border.alpha = 0.5) +
tm_shape(de_lines) +
tm_lines(col = "black", alpha = 0.75) +
tm_layout(frame = F)
