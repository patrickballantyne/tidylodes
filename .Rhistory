temp_lookup <- transform(temp_lookup, StateID = substr(tabblk2010, 1, 2), CountyID = substr(tabblk2010, 3, 5),
TractID = substr(tabblk2010, 6, 11), BlockGroupID = substr(tabblk2010, 12, 12),
CensusBlockID = substr(tabblk2010, 13, 15))
temp_lookup <- temp_lookup[, c("tabblk2010", "StateID", "stname", "CountyID", "ctyname",
"TractID", "trctname", "BlockGroupID", "bgrpname")]
colnames(temp_lookup) <- c("Census_Block_Code", "StateID", "StateName", "CountyID", "CountyName",
"TractID", "TractName", "BlockGroupID", "BlockGroupName")
## Stage Five - Joining the lookup to the main RAC dataset
df <- merge(temp, temp_lookup, by = "Census_Block_Code", all.x = TRUE)
df <- subset(df, select = -c(StateID.y, CountyID.y, TractID.y, BlockGroupID.y))
df <- df[, c(1:2, 47, 3, 48, 4, 49, 5, 50, 6:46)]
colnames(df)[1:10] <- c("Census_Block_Code", "StateID", "StateName", "CountyID", "CountyName", "TractID", "TractName",
"BlockGroupID", "BlockGroupName", "CensusBlockID")
## Stage Six - Column classes and final tidying
cols <- df[, 11:50]
cols <- dplyr::mutate_all(cols, as.numeric)
geog <- df[, 1:10]
db <- cbind(geog, cols)
db$StateAbb <- state_name
return(db)
}
get_rac_data <- function(state_name, year) {
## Stage One - Extracting Data from LODES
dl_file <- paste0(state_name, "_rac_S000_JT00_", year, ".csv.gz")
download.file(paste0("http://lehd.ces.census.gov/data/lodes/LODES7/", state_name, "/rac/", dl_file), dl_file)
R.utils::gunzip(dl_file)
temp <- data.table::fread(paste0(state_name, "_rac_S000_JT00_", year, ".csv"))
rm(dl_file)
file.remove(paste0(state_name, "_rac_S000_JT00_", year, ".csv"))
## Stage Two - Processing Data from LODES
temp <- subset(temp, select=-c(CS01, CS02))
colnames(temp) <- c("Census_Block_Code", "Total_Jobs", "Jobs_Under29", "Jobs_30to54", "Jobs_Over55",
"Low_Income_Jobs", "Middle_Income_Jobs","High_Income_Jobs", "Agr_For_Fish_Hunt",
"Mine_Quar_Oil_Gas", "Utilities", "Construction", "Manufacturing", "Whole_Trade",
"Retail_Trade", "Transport_Warehouse", "Information", "Finance_Insurance", "Real_Estate",
"Prof_Scie_Tech", "Management", "Waste_Admin", "Education", "Health_Social_Care", "Arts_Recr_Enter",
"Accom_Food", "Other_Services", "Public_Admin","Jobs_White", "Jobs_Black_AfroAmer", "Jobs_Amer_Indi_Native",
"Jobs_Asian", "Jobs_Hawaii", "Jobs_2_Race", "Jobs_Not_Hispanic","Jobs_Hispanic", "Jobs_Low_Education",
"Jobs_School_Ed", "Jobs_College", "Jobs_Degree", "Data_Date")
temp[, ] <- lapply(temp[, ], as.character)
temp$Census_Block_Code <- stringr::str_pad(temp$Census_Block_Code, width = 15, side = 'left', pad = 0) # add leading zero
temp <- transform(temp, StateID = substr(Census_Block_Code, 1, 2), CountyID = substr(Census_Block_Code, 3, 5),
TractID = substr(Census_Block_Code, 6, 11), BlockGroupID = substr(Census_Block_Code, 12, 12),
CensusBlockID = substr(Census_Block_Code, 13, 15), Census_Block_Code = Census_Block_Code)
temp <- temp[, c(1, 42:46, 2:41)]
## Stage Three - Joining the lookup
dl_file_lookup <- paste0(state_name, "_xwalk.csv.gz")
download.file(paste0("http://lehd.ces.census.gov/data/lodes/LODES7/", state_name, "/", dl_file_lookup), dl_file_lookup)
R.utils::gunzip(dl_file_lookup)
temp_lookup <- data.table::fread(paste0(state_name, "_xwalk.csv"))
file.remove(paste0(state_name, "_xwalk.csv"))
## Stage Four - Processing the lookup
temp_lookup <- temp_lookup[, c("tabblk2010", "st", "stname", "cty", "ctyname", "trct", "trctname", "bgrp","bgrpname")]
temp_lookup[, ] <- lapply(temp_lookup[, ], as.character)
temp_lookup$tabblk2010 <- stringr::str_pad(temp_lookup$tabblk2010, width = 15, side = 'left', pad = 0)
temp_lookup <- transform(temp_lookup, StateID = substr(tabblk2010, 1, 2), CountyID = substr(tabblk2010, 3, 5),
TractID = substr(tabblk2010, 6, 11), BlockGroupID = substr(tabblk2010, 12, 12),
CensusBlockID = substr(tabblk2010, 13, 15))
temp_lookup <- temp_lookup[, c("tabblk2010", "StateID", "stname", "CountyID", "ctyname",
"TractID", "trctname", "BlockGroupID", "bgrpname")]
colnames(temp_lookup) <- c("Census_Block_Code", "StateID", "StateName", "CountyID", "CountyName",
"TractID", "TractName", "BlockGroupID", "BlockGroupName")
## Stage Five - Joining the lookup to the main RAC dataset
df <- merge(temp, temp_lookup, by = "Census_Block_Code", all.x = TRUE)
df <- subset(df, select = -c(StateID.y, CountyID.y, TractID.y, BlockGroupID.y))
df <- df[, c(1:2, 47, 3, 48, 4, 49, 5, 50, 6:46)]
colnames(df)[1:10] <- c("Census_Block_Code", "StateID", "StateName", "CountyID", "CountyName", "TractID", "TractName",
"BlockGroupID", "BlockGroupName", "CensusBlockID")
## Stage Six - Column classes and final tidying
cols <- df[, 11:50]
cols <- dplyr::mutate_all(cols, as.numeric)
geog <- df[, 1:10]
db <- cbind(geog, cols)
db$StateAbb <- state_name
return(db)
}
de_rac <- get_rac_data("de", "2012")
colnames(de_rac)
str(de_rac)
## Function 2. Grabbing and cleaning RAC data for one state, one year - e.g. get_rac_data("de", "2012")
get_rac_data <- function(state_name, year) {
## Stage One - Extracting Data from LODES
dl_file <- paste0(state_name, "_rac_S000_JT00_", year, ".csv.gz")
download.file(paste0("http://lehd.ces.census.gov/data/lodes/LODES7/", state_name, "/rac/", dl_file), dl_file)
R.utils::gunzip(dl_file)
temp <- data.table::fread(paste0(state_name, "_rac_S000_JT00_", year, ".csv"))
rm(dl_file)
file.remove(paste0(state_name, "_rac_S000_JT00_", year, ".csv"))
## Stage Two - Processing Data from LODES
temp <- subset(temp, select=-c(CS01, CS02))
colnames(temp) <- c("Census_Block_Code", "Total_Jobs", "Jobs_Under29", "Jobs_30to54", "Jobs_Over55",
"Low_Income_Jobs", "Middle_Income_Jobs","High_Income_Jobs", "Agr_For_Fish_Hunt",
"Mine_Quar_Oil_Gas", "Utilities", "Construction", "Manufacturing", "Whole_Trade",
"Retail_Trade", "Transport_Warehouse", "Information", "Finance_Insurance", "Real_Estate",
"Prof_Scie_Tech", "Management", "Waste_Admin", "Education", "Health_Social_Care", "Arts_Recr_Enter",
"Accom_Food", "Other_Services", "Public_Admin","Jobs_White", "Jobs_Black_AfroAmer", "Jobs_Amer_Indi_Native",
"Jobs_Asian", "Jobs_Hawaii", "Jobs_2_Race", "Jobs_Not_Hispanic","Jobs_Hispanic", "Jobs_Low_Education",
"Jobs_School_Ed", "Jobs_College", "Jobs_Degree", "Data_Date")
temp[, ] <- lapply(temp[, ], as.character)
temp$Census_Block_Code <- stringr::str_pad(temp$Census_Block_Code, width = 15, side = 'left', pad = 0) # add leading zero
temp <- transform(temp, StateID = substr(Census_Block_Code, 1, 2), CountyID = substr(Census_Block_Code, 3, 5),
TractID = substr(Census_Block_Code, 6, 11), BlockGroupID = substr(Census_Block_Code, 12, 12),
CensusBlockID = substr(Census_Block_Code, 13, 15), Census_Block_Code = Census_Block_Code)
temp <- temp[, c(1, 42:46, 2:41)]
## Stage Three - Joining the lookup
dl_file_lookup <- paste0(state_name, "_xwalk.csv.gz")
download.file(paste0("http://lehd.ces.census.gov/data/lodes/LODES7/", state_name, "/", dl_file_lookup), dl_file_lookup)
R.utils::gunzip(dl_file_lookup)
temp_lookup <- data.table::fread(paste0(state_name, "_xwalk.csv"))
file.remove(paste0(state_name, "_xwalk.csv"))
## Stage Four - Processing the lookup
temp_lookup <- temp_lookup[, c("tabblk2010", "st", "stname", "cty", "ctyname", "trct", "trctname", "bgrp","bgrpname")]
temp_lookup[, ] <- lapply(temp_lookup[, ], as.character)
temp_lookup$tabblk2010 <- stringr::str_pad(temp_lookup$tabblk2010, width = 15, side = 'left', pad = 0)
temp_lookup <- transform(temp_lookup, StateID = substr(tabblk2010, 1, 2), CountyID = substr(tabblk2010, 3, 5),
TractID = substr(tabblk2010, 6, 11), BlockGroupID = substr(tabblk2010, 12, 12),
CensusBlockID = substr(tabblk2010, 13, 15))
temp_lookup <- temp_lookup[, c("tabblk2010", "StateID", "stname", "CountyID", "ctyname",
"TractID", "trctname", "BlockGroupID", "bgrpname")]
colnames(temp_lookup) <- c("Census_Block_Code", "StateID", "StateName", "CountyID", "CountyName",
"TractID", "TractName", "BlockGroupID", "BlockGroupName")
## Stage Five - Joining the lookup to the main RAC dataset
df <- merge(temp, temp_lookup, by = "Census_Block_Code", all.x = TRUE)
df <- subset(df, select = -c(StateID.y, CountyID.y, TractID.y, BlockGroupID.y))
df <- df[, c(1:2, 47, 3, 48, 4, 49, 5, 50, 6:46)]
colnames(df)[1:10] <- c("Census_Block_Code", "StateID", "StateName", "CountyID", "CountyName", "TractID", "TractName",
"BlockGroupID", "BlockGroupName", "CensusBlockID")
## Stage Six - Column classes and final tidying
cols <- df[, 11:50]
cols <- dplyr::mutate_all(cols, as.numeric)
geog <- df[, 1:10]
db <- cbind(geog, cols)
db$StateAbb <- state_name
db <- db[, c(1:3, 51, 4:50)]
return(db)
}
de_rac <- get_rac_data("de", "2012")
str(de_rac)
de_wac <- get_wac_data("de", "2012")
head(de_wac)
## Setup
library(tidylodes)
de_wac <- get_wac_data("de", "2012")
de_wac_rt <- get_jobsector_wac(de_wac, "Retail_Trade", job_proportion = T)
de_wac_sp <- get_wac_spatial(de_wac)
de_wac_rt_sp <- get_wac_spatial(de_wac_rt)
de_rac <- get_rac_data("de", "2012")
de_rac_rt <- get_jobsector_rac(de_rac, "Retail_Trade", job_proportion = T)
de_rac_sp <- get_rac_spatial(de_rac)
de_rac_rt_sp <- get_rac_spatial(de_rac_rt)
str(de_rac_rt_sp)
str(de_wac_rt_sp)
meow <- st_as_sf(de_wac_rt_sp)
meow <- sf::st_as_sf(de_wac_rt_sp)
str(meow)
plot(meow)
str(de_wac_rt_sp)
str(de_rac_rt_sp)
meow <- sf::st_as_sf(de_rac_rt_sp)
str(meow)
## Function 2b. Function that converts RAC data to simple feature (polygon) for easy plotting/spatial manip.
get_rac_spatial <- function(df) {
## Stage One - Setting up identifier for TIGRIS
options(tigris_class = "sf")
state_of_interest <- unique(df$StateAbb)
state_of_interest <- stringr::str_to_upper(state_of_interest)
## Stage Two - Getting census blocks for state of interest
blocks <- tigris::blocks(state = state_of_interest)
blocks <- blocks[, c("GEOID10","STATEFP10", "COUNTYFP10", "TRACTCE10", "BLOCKCE10")]
colnames(blocks) <- c("Census_Block_Code","StateID", "CountyID", "TractID", "BlockID")
blocks <- transform(blocks, BlockGroupID = substr(BlockID, 1, 1), CensusBlockID = substr(BlockID, 2, 4))
## Stage Three - Joining RAC data with census blocks
shp <- merge(blocks, df, by = "Census_Block_Code", all.x = T)
shp <- subset(shp, select = -c(BlockID, StateID.y, CountyID.y, TractID.y, BlockGroupID.y, CensusBlockID.y))
colnames(shp)[2:7] <- c("StateID", "CountyID", "TractID", "geometry","BlockGroupID", "CensusBlockID")
shp_sf <- sf::st_as_sf(shp)
return(shp)
}
de_rac_sf <- get_rac_spatial(de_rac)
str(de_rac_sf)
get_rac_spatial <- function(df) {
## Stage One - Setting up identifier for TIGRIS
options(tigris_class = "sf")
state_of_interest <- unique(df$StateAbb)
state_of_interest <- stringr::str_to_upper(state_of_interest)
## Stage Two - Getting census blocks for state of interest
blocks <- tigris::blocks(state = state_of_interest)
blocks <- blocks[, c("GEOID10","STATEFP10", "COUNTYFP10", "TRACTCE10", "BLOCKCE10")]
colnames(blocks) <- c("Census_Block_Code","StateID", "CountyID", "TractID", "BlockID")
blocks <- transform(blocks, BlockGroupID = substr(BlockID, 1, 1), CensusBlockID = substr(BlockID, 2, 4))
## Stage Three - Joining RAC data with census blocks
shp <- merge(blocks, df, by = "Census_Block_Code", all.x = T)
shp <- subset(shp, select = -c(BlockID, StateID.y, CountyID.y, TractID.y, BlockGroupID.y, CensusBlockID.y))
colnames(shp)[2:7] <- c("StateID", "CountyID", "TractID", "geometry","BlockGroupID", "CensusBlockID")
shp_sf <- sf::st_as_sf(shp)
return(shp_sf)
}
de_rac_sf <- get_rac_spatial(de_rac)
str(de_rac_sf)
get_rac_spatial <- function(df) {
## Stage One - Setting up identifier for TIGRIS
options(tigris_class = "sf")
state_of_interest <- unique(df$StateAbb)
state_of_interest <- stringr::str_to_upper(state_of_interest)
## Stage Two - Getting census blocks for state of interest
blocks <- tigris::blocks(state = state_of_interest)
blocks <- blocks[, c("GEOID10","STATEFP10", "COUNTYFP10", "TRACTCE10", "BLOCKCE10")]
colnames(blocks) <- c("Census_Block_Code","StateID", "CountyID", "TractID", "BlockID")
blocks <- transform(blocks, BlockGroupID = substr(BlockID, 1, 1), CensusBlockID = substr(BlockID, 2, 4))
## Stage Three - Joining RAC data with census blocks
shp <- merge(blocks, df, by = "Census_Block_Code", all.x = F)
shp <- subset(shp, select = -c(BlockID, StateID.y, CountyID.y, TractID.y, BlockGroupID.y, CensusBlockID.y))
colnames(shp)[2:7] <- c("StateID", "CountyID", "TractID", "geometry","BlockGroupID", "CensusBlockID")
shp_sf <- sf::st_as_sf(shp)
return(shp_sf)
}
test <- get_rac_spatial(de_rac)
summary(test)
test_df <- get_od_data("de", "2011")
test_sp <- get_od_spatial(test_df)
summary(test_sp)
devtools::build()
devtools::install()
build()
devtools::build9
devtools::build()
devtools::install()
## Setup
library(tidylodes)
## Convert the simple features
de_wac_rt_sf <- get_wac_spatial(de_wac_rt)
## Setup
library(tidylodes)
## Extract WAC data for Delaware, from 2013
de_wac <- get_wac_data("de", "2013")
de_wac[1:2, ]
## Reduce the dimensionality of de_wac to focus on one job sector - e.g. Retail Trade
de_wac_rt <- get_jobsector_wac(de_wac, Job_Code = "Retail_Trade",
job_proportion = T)
de_wac_rt[1:2, ]
## Convert the simple features
de_wac_rt_sf <- get_wac_spatial(de_wac_rt)
de_wac_rt_sf[1:2, ]
## Convert the simple features
de_wac_rt_sf <- get_wac_spatial(de_wac_rt)
de_wac_rt_sf[1:2, ]
## Convert the simple features
de_wac_rt_sf <- get_wac_spatial(de_wac_rt)
de_wac_rt_sf[1:2, ]
## Convert the simple features
de_wac_rt_sf <- get_wac_spatial(de_wac_rt)
de_wac_rt_sf[1:2, ]
de_wac_rt_sf[1:2, ]
## Map
tm_shape(vt_rac_sf) +
tm_fill(col = "Retail_Trade", style = "pretty",
title = "Retail Trade Jobs", palette = "YlOrRd", n = 5) +
tm_layout(legend.outside = T, frame = FALSE)
#install.packages("tidyverse")
library(tidyverse)
#install.packages("tmap")
library(tmap)
vt_rac_sf <- sf::st_as_sf(vt_rac_sf)
## Get RAC data for Vermont, from 2017
vt_rac <- get_rac_data("vt", "2017")
## Convert to simple feature
vt_rac_sf <- get_rac_spatial(vt_rac)
vt_rac_sf[1:2, ]
## Get RAC data for Vermont, from 2017
vt_rac <- get_rac_data("vt", "2017")
## Convert to simple feature
vt_rac_sf <- get_rac_spatial(vt_rac)
#install.packages("tidyverse")
library(tidyverse)
#install.packages("tmap")
library(tmap)
## Subset dataset to specific County & Tract
vt_rac_sf <- vt_rac_sf %>%
filter(CountyID == "001", TractID == "960100")
## Map
tm_shape(vt_rac_sf) +
tm_fill(col = "Retail_Trade", style = "pretty",
title = "Retail Trade Jobs", palette = "YlOrRd", n = 5) +
tm_layout(legend.outside = T, frame = FALSE)
## Map
tm_shape(vt_rac_sf) +
tm_fill(col = "Retail_Trade", style = "pretty",
title = "Retail Trade Jobs", palette = "YlOrRd", n = 3) +
tm_layout(legend.outside = T, frame = FALSE)
## Map
tm_shape(vt_rac_sf) +
tm_fill(col = "Retail_Trade", style = "pretty",
title = "Retail Trade Jobs", palette = "YlOrRd", n = 4) +
tm_layout(legend.outside = T, frame = FALSE)
## Map
tm_shape(vt_rac_sf) +
tm_fill(col = "Retail_Trade", style = "pretty",
title = "Retail Trade Jobs", palette = "YlOrRd", n = 3) +
tm_layout(legend.outside = T, frame = FALSE)
#install.packages("tidyverse")
library(tidyverse)
#install.packages("tmap")
library(tmap)
## Subset dataset to specific County & Tract
vt_rac_sf <- dplyr::filter(CountyID == "001", TractID == "960100")
#install.packages("tidyverse")
library(tidyverse)
#install.packages("tmap")
library(tmap)
## Subset dataset to specific County & Tract
area_of_interest <- vt_rac_sf %>%
filter(CountyID == "001", TractID == "960100")
## Map
tm_shape(area_of_interest) +
tm_fill(col = "Retail_Trade", style = "pretty",
title = "Retail Trade Jobs", palette = "YlOrRd", n = 3) +
tm_layout(legend.outside = T, frame = FALSE)
View(vt_rac_sf)
## Get RAC data for Vermont, from 2017
vt_rac <- get_rac_data("vt", "2017")
## Convert to simple feature
vt_rac_sf <- get_rac_spatial(vt_rac)
View(vt_rac_sf)
#install.packages("tidyverse")
library(tidyverse)
#install.packages("tmap")
library(tmap)
## Subset dataset to specific County & Tract
area_of_interest <- vt_rac_sf %>%
filter(CountyID == "007", TractID == "000200")
## Map
tm_shape(area_of_interest) +
tm_fill(col = "Retail_Trade", style = "pretty",
title = "Retail Trade Jobs", palette = "YlOrRd", n = 3) +
tm_layout(legend.outside = T, frame = FALSE)
## Map
tm_shape(area_of_interest) +
tm_fill(col = "Retail_Trade", style = "pretty",
title = "Retail Trade Jobs", palette = "YlOrRd", n = 5) +
tm_layout(legend.outside = T, frame = FALSE)
## Map
tm_shape(area_of_interest) +
tm_fill(col = "Retail_Trade", style = "pretty",
title = "Retail Trade Jobs", palette = "YlOrRd", n = 8) +
tm_layout(legend.outside = T, frame = FALSE)
## Map
tm_shape(area_of_interest) +
tm_fill(col = "Retail_Trade", style = "pretty",
title = "Retail Trade Jobs", palette = "YlOrRd", n = 5) +
tm_layout(legend.outside = T, frame = FALSE)
## Map
tm_shape(area_of_interest) +
tm_fill(col = "Retail_Trade", style = "quantile",
title = "Retail Trade Jobs", palette = "YlOrRd", n = 5) +
tm_layout(legend.outside = T, frame = FALSE)
## Map
tm_shape(area_of_interest) +
tm_fill(col = "Retail_Trade", style = "jenks",
title = "Retail Trade Jobs", palette = "YlOrRd", n = 5) +
tm_layout(legend.outside = T, frame = FALSE)
## Map
tmap_mode('leaflet)
## Map
tmap_mode('leaflet')
## Map
tmap_mode('leaflet')
## Map
tmap_mode('view')
tm_shape(area_of_interest) +
tm_fill(col = "Retail_Trade", style = "jenks",
title = "Retail Trade Jobs", palette = "YlOrRd", n = 5) +
tm_layout(legend.outside = T, frame = FALSE)
## Map
tmap_mode('plot')
tm_shape(area_of_interest) +
tm_fill(col = "Retail_Trade", style = "jenks",
title = "Retail Trade Jobs", palette = "YlOrRd", n = 5) +
tm_layout(legend.outside = T, frame = FALSE)
get_jobsector_wac <- function(df, job_code, job_proportion = T) {
### Stage One - Subsetting to include only job sector of interest
df_sub <- df[, c("Census_Block_Code", "StateID", "StateName", "StateAbb", "CountyID", "CountyName","TractID", "TractName", "BlockGroupID",
"BlockGroupName", "CensusBlockID","Total_Jobs")]
df_col <- dplyr::select(df, job_code)
df_full <- cbind(df_sub, df_col)
df_full[, 12] <- sapply(df_full[, 12], as.numeric)
### Stage Two - Calculating job sector proportion
if(job_proportion == T) {
colnames(df_full)[13] <- "Col_of_Interest"
df_full[, 13] <- sapply(df_full[, 13], as.numeric)
df_full$Job_Code_Proportion <- (df_full$Col_of_Interest/df_full$Total_Jobs)*100
colnames(df_full)[13] <- paste0(Job_Code)
colnames(df_full)[14] <- paste0(Job_Code, "_Proportion")}
else {
df_full <- df_full
}
return(df_full)
}
devtools::build()
devtools::install()
devtools::build()
## Setup
library(tidylodes)
## Reduce the dimensionality of de_wac to focus on one job sector - e.g. Retail Trade
de_wac_rt <- get_jobsector_wac(de_wac, job_code = "Retail_Trade",
job_proportion = T)
## Extract WAC data for Delaware, from 2013
de_wac <- get_wac_data("de", "2013")
de_wac[1:2, ]
## Reduce the dimensionality of de_wac to focus on one job sector - e.g. Retail Trade
de_wac_rt <- get_jobsector_wac(de_wac, job_code = "Retail_Trade",
job_proportion = T)
build()
devtools::build()
devtools::install()
library(tidylodes)
?get_wac_data
file.exists("~/.ssh.id_rsa.pub")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
## Need to link to github here!
## Setup
library(tidylodes)
## List all available functions
ls("package:tidylodes")
## Extract WAC data for Delaware, from 2013
de_wac <- get_wac_data("de", "2013")
de_wac[1:2, ]
## Reduce the dimensionality of de_wac to focus on one job sector - e.g. Retail Trade
de_wac_rt <- get_jobsector_wac(de_wac, job_code = "Retail_Trade",
job_proportion = T)
de_wac_rt[1:2, ]
## Convert the simple features
de_wac_rt_sf <- get_wac_spatial(de_wac_rt)
de_wac_rt_sf[1:2, ]
## Download OD data for Delaware, from 2013
de_od <- get_od_data("de", "2013", main = T)
de_od[1:2, ]
## Subset data to include only those rows of data where flows exceed a certain threshold
de_od_sub <- get_od_subset(de_od, flow_threshold = 30)
de_od_sub[1:2, ]
## Convert to a format that enables plotting of flow lines between census block centroids
de_od_sub_sp <- get_od_spatial(de_od_sub)
de_od_sub_sp[1:2, ]
## Get RAC data for Vermont, from 2017
vt_rac <- get_rac_data("vt", "2017")
## Convert to simple feature
vt_rac_sf <- get_rac_spatial(vt_rac)
#install.packages("tidyverse")
library(tidyverse)
#install.packages("tmap")
library(tmap)
## Subset dataset to specific County & Tract
area_of_interest <- vt_rac_sf %>%
filter(CountyID == "007", TractID == "000200")
## Map
tm_shape(area_of_interest) +
tm_fill(col = "Retail_Trade", style = "jenks",
title = "Retail Trade Jobs", palette = "YlOrRd", n = 5) +
tm_layout(legend.outside = T, frame = FALSE)
## Get OD data for Illinois State
il_od <- get_od_data("il", "2014", T)
## Subset to flows over 50
il_od_sub <- get_od_subset(il_od, flow_threshold = 50)
head(il_od_sub)
## Convert to spatial format
il_od_sub_sp <- get_od_spatial(il_od_sub)
head(il_od_sub_sp)
ggplot(il_od_sub_sp, aes(W_geometry, R_geometry)) +
geom_segment(aes(x = W_geometry, y = R_geometry), col = 'white') +
scale_alpha_continuous() +
theme(panel.background = element_rect(fill='black', colour = 'black'))
ggplot(il_od_sub_sp, aes(W_geometry, R_geometry)) +
geom_segment(aes(x = W_geometry, y = R_geometry, xend = W_geometry, yend = R_geometry), col = 'white') +
scale_alpha_continuous() +
theme(panel.background = element_rect(fill='black', colour = 'black'))
plot(x = il_od_sub_sp$W_geometry, y = il_od_sub_sp$R_geometry)
plot(x = il_od_sub_sp$W_geometry)
nrow(il_od_sub_sp
nrow(il_od_sub_sp)
nrow(il_od_sub_sp)
plot(x = il_od_sub_sp)
# Get function help
?get_wac_data
## Get OD data for Delaware State
de_od <- get_od_data("da", "2014", T)
## Get OD data for Delaware State
de_od <- get_od_data("de", "2014", T)
## Subset to flows over 50
de_od_sub <- get_od_subset(de_od, flow_threshold = 50)
## Convert to spatial format
de_od_sub_sp <- get_od_spatial(de_od_sub)
## Plot
dplyr::glimpse(de_od_sub_sp)
## Get OD data for Delaware State
de_od <- get_od_data("de", "2014", T)
## Subset to flows over 50
de_od_sub <- get_od_subset(de_od, flow_threshold = 50)
## Install package directly from GitHub
devtools::install_github("patrickballantyne/tidylodes")
devtools::build()
devtools::install()
devtools::build()
## Stage Four - Formatting geometries
df <- dplyr::mutate(df_merge_2, W_lat = unlist(map(df_merge_2$W_geometry,1)),
W_lon = unlist(map(df_merge_2$W_geometry,2)), R_lat =  unlist(purrr::map(df_merge_2$R_geometry,1)),
R_lon = unlist(map(df_merge_2$R_geometry,2)))
devtools::build()
devtools::build()
devtools::build()
devtools::install()
